// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

package rpc // import "github.com/hyperledger/burrow/rpc"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import validator "github.com/hyperledger/burrow/acm/validator"
import bcm "github.com/hyperledger/burrow/bcm"
import tendermint "github.com/hyperledger/burrow/consensus/tendermint"

import github_com_hyperledger_burrow_binary "github.com/hyperledger/burrow/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ResultStatus struct {
	ChainID              string                                        `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	RunID                string                                        `protobuf:"bytes,2,opt,name=RunID,proto3" json:"RunID,omitempty"`
	BurrowVersion        string                                        `protobuf:"bytes,3,opt,name=BurrowVersion,proto3" json:"BurrowVersion,omitempty"`
	GenesisHash          github_com_hyperledger_burrow_binary.HexBytes `protobuf:"bytes,4,opt,name=GenesisHash,proto3,customtype=github.com/hyperledger/burrow/binary.HexBytes" json:"GenesisHash"`
	NodeInfo             *tendermint.NodeInfo                          `protobuf:"bytes,5,opt,name=NodeInfo" json:"NodeInfo,omitempty"`
	SyncInfo             *bcm.SyncInfo                                 `protobuf:"bytes,6,opt,name=SyncInfo" json:"SyncInfo,omitempty"`
	CatchingUp           bool                                          `protobuf:"varint,8,opt,name=CatchingUp,proto3" json:""`
	ValidatorInfo        *validator.Validator                          `protobuf:"bytes,7,opt,name=ValidatorInfo" json:"ValidatorInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *ResultStatus) Reset()         { *m = ResultStatus{} }
func (m *ResultStatus) String() string { return proto.CompactTextString(m) }
func (*ResultStatus) ProtoMessage()    {}
func (*ResultStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_64e9562a8eef4c9e, []int{0}
}
func (m *ResultStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResultStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultStatus.Merge(dst, src)
}
func (m *ResultStatus) XXX_Size() int {
	return m.Size()
}
func (m *ResultStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ResultStatus proto.InternalMessageInfo

func (m *ResultStatus) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ResultStatus) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *ResultStatus) GetBurrowVersion() string {
	if m != nil {
		return m.BurrowVersion
	}
	return ""
}

func (m *ResultStatus) GetNodeInfo() *tendermint.NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *ResultStatus) GetSyncInfo() *bcm.SyncInfo {
	if m != nil {
		return m.SyncInfo
	}
	return nil
}

func (m *ResultStatus) GetCatchingUp() bool {
	if m != nil {
		return m.CatchingUp
	}
	return false
}

func (m *ResultStatus) GetValidatorInfo() *validator.Validator {
	if m != nil {
		return m.ValidatorInfo
	}
	return nil
}

func (*ResultStatus) XXX_MessageName() string {
	return "rpc.ResultStatus"
}
func init() {
	proto.RegisterType((*ResultStatus)(nil), "rpc.ResultStatus")
	golang_proto.RegisterType((*ResultStatus)(nil), "rpc.ResultStatus")
}
func (m *ResultStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	if len(m.RunID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.RunID)))
		i += copy(dAtA[i:], m.RunID)
	}
	if len(m.BurrowVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.BurrowVersion)))
		i += copy(dAtA[i:], m.BurrowVersion)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintRpc(dAtA, i, uint64(m.GenesisHash.Size()))
	n1, err := m.GenesisHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.NodeInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.NodeInfo.Size()))
		n2, err := m.NodeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SyncInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.SyncInfo.Size()))
		n3, err := m.SyncInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ValidatorInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.ValidatorInfo.Size()))
		n4, err := m.ValidatorInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CatchingUp {
		dAtA[i] = 0x40
		i++
		if m.CatchingUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResultStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.BurrowVersion)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = m.GenesisHash.Size()
	n += 1 + l + sovRpc(uint64(l))
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.SyncInfo != nil {
		l = m.SyncInfo.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ValidatorInfo != nil {
		l = m.ValidatorInfo.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.CatchingUp {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResultStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurrowVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurrowVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &tendermint.NodeInfo{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncInfo == nil {
				m.SyncInfo = &bcm.SyncInfo{}
			}
			if err := m.SyncInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorInfo == nil {
				m.ValidatorInfo = &validator.Validator{}
			}
			if err := m.ValidatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchingUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatchingUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_64e9562a8eef4c9e) }
func init() { golang_proto.RegisterFile("rpc.proto", fileDescriptor_rpc_64e9562a8eef4c9e) }

var fileDescriptor_rpc_64e9562a8eef4c9e = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x3f, 0xaf, 0xd3, 0x30,
	0x14, 0xc5, 0x9f, 0xdf, 0xdf, 0xd4, 0xef, 0x55, 0x20, 0xab, 0x43, 0xd4, 0x21, 0x09, 0xa8, 0x43,
	0x18, 0x48, 0x10, 0x08, 0x21, 0x31, 0xa6, 0x48, 0xb4, 0x0b, 0x83, 0x2b, 0x8a, 0xc4, 0xe6, 0x24,
	0x6e, 0x62, 0x29, 0xb1, 0x23, 0xdb, 0x01, 0xf2, 0xed, 0x18, 0x3b, 0x32, 0x33, 0x54, 0xa8, 0xdd,
	0xf8, 0x0c, 0x0c, 0xa8, 0x6e, 0xd2, 0xa6, 0xcb, 0xdb, 0xee, 0xf9, 0x9d, 0x73, 0xaf, 0xa5, 0x63,
	0x38, 0x90, 0x55, 0x12, 0x54, 0x52, 0x68, 0x81, 0xae, 0x64, 0x95, 0x8c, 0x5f, 0x66, 0x4c, 0xe7,
	0x75, 0x1c, 0x24, 0xa2, 0x0c, 0x33, 0x91, 0x89, 0xd0, 0x78, 0x71, 0xbd, 0x32, 0xca, 0x08, 0x33,
	0x1d, 0x76, 0xc6, 0x4f, 0x35, 0xe5, 0x29, 0x95, 0x25, 0xe3, 0xba, 0x25, 0x4f, 0xbe, 0x91, 0x82,
	0xa5, 0x44, 0x0b, 0xd9, 0x82, 0x41, 0x9c, 0x94, 0xed, 0xe8, 0x66, 0x42, 0x64, 0x05, 0x3d, 0xdd,
	0xd4, 0xac, 0xa4, 0x4a, 0x93, 0xb2, 0x3a, 0x04, 0x9e, 0xff, 0xbb, 0x84, 0x0f, 0x98, 0xaa, 0xba,
	0xd0, 0x0b, 0x4d, 0x74, 0xad, 0x90, 0x0d, 0xef, 0xa6, 0x39, 0x61, 0x7c, 0xfe, 0xc1, 0x06, 0x1e,
	0xf0, 0x07, 0xb8, 0x93, 0x68, 0x04, 0x6f, 0x70, 0xbd, 0xe7, 0x97, 0x86, 0x1f, 0x04, 0x9a, 0xc0,
	0x61, 0x54, 0x4b, 0x29, 0xbe, 0x2f, 0xa9, 0x54, 0x4c, 0x70, 0xfb, 0xca, 0xb8, 0xe7, 0x10, 0x7d,
	0x81, 0xf7, 0x1f, 0x29, 0xa7, 0x8a, 0xa9, 0x19, 0x51, 0xb9, 0x7d, 0xed, 0x01, 0xff, 0x21, 0x7a,
	0xbb, 0xde, 0xb8, 0x17, 0xbf, 0x37, 0x6e, 0xbf, 0x81, 0xbc, 0xa9, 0xa8, 0x2c, 0x68, 0x9a, 0x51,
	0x19, 0xc6, 0xe6, 0x44, 0x18, 0x33, 0x4e, 0x64, 0x13, 0xcc, 0xe8, 0x8f, 0xa8, 0xd1, 0x54, 0xe1,
	0xfe, 0x25, 0xf4, 0x0a, 0x5a, 0x9f, 0x44, 0x4a, 0xe7, 0x7c, 0x25, 0xec, 0x1b, 0x0f, 0xf8, 0xf7,
	0xaf, 0x47, 0x41, 0xaf, 0xa1, 0xce, 0xc3, 0xc7, 0x14, 0x7a, 0x01, 0xad, 0x45, 0xc3, 0x13, 0xb3,
	0x71, 0x6b, 0x36, 0x86, 0xc1, 0xbe, 0xb0, 0x0e, 0xe2, 0xa3, 0x8d, 0xde, 0xc3, 0xe1, 0xb2, 0xeb,
	0xd6, 0xe4, 0xef, 0xda, 0x17, 0x4e, 0x8d, 0x1f, 0x7d, 0x7c, 0x1e, 0x45, 0x13, 0x08, 0xa7, 0x44,
	0x27, 0x39, 0xe3, 0xd9, 0xe7, 0xca, 0xb6, 0x3c, 0xe0, 0x5b, 0xd1, 0xf5, 0xdf, 0x8d, 0x7b, 0x81,
	0x7b, 0x3c, 0x7a, 0xb7, 0xde, 0x3a, 0xe0, 0xd7, 0xd6, 0x01, 0x7f, 0xb6, 0x0e, 0xf8, 0xb9, 0x73,
	0xc0, 0x7a, 0xe7, 0x80, 0xaf, 0xcf, 0x1e, 0x2f, 0x44, 0x56, 0x49, 0x7c, 0x6b, 0xbe, 0xef, 0xcd,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x51, 0x33, 0xc0, 0x4e, 0x02, 0x00, 0x00,
}
