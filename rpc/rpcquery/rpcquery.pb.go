// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpcquery.proto

package rpcquery // import "github.com/hyperledger/burrow/rpc/rpcquery"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import acm "github.com/hyperledger/burrow/acm"
import validator "github.com/hyperledger/burrow/acm/validator"
import names "github.com/hyperledger/burrow/execution/names"
import rpc "github.com/hyperledger/burrow/rpc"
import payload "github.com/hyperledger/burrow/txs/payload"

import github_com_hyperledger_burrow_crypto "github.com/hyperledger/burrow/crypto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StatusParam struct {
	BlockTimeWithin      string   `protobuf:"bytes,1,opt,name=BlockTimeWithin,proto3" json:"BlockTimeWithin,omitempty"`
	BlockSeenTimeWithin  string   `protobuf:"bytes,2,opt,name=BlockSeenTimeWithin,proto3" json:"BlockSeenTimeWithin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusParam) Reset()         { *m = StatusParam{} }
func (m *StatusParam) String() string { return proto.CompactTextString(m) }
func (*StatusParam) ProtoMessage()    {}
func (*StatusParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{0}
}
func (m *StatusParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusParam.Merge(dst, src)
}
func (m *StatusParam) XXX_Size() int {
	return m.Size()
}
func (m *StatusParam) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusParam.DiscardUnknown(m)
}

var xxx_messageInfo_StatusParam proto.InternalMessageInfo

func (m *StatusParam) GetBlockTimeWithin() string {
	if m != nil {
		return m.BlockTimeWithin
	}
	return ""
}

func (m *StatusParam) GetBlockSeenTimeWithin() string {
	if m != nil {
		return m.BlockSeenTimeWithin
	}
	return ""
}

func (*StatusParam) XXX_MessageName() string {
	return "rpcquery.StatusParam"
}

type GetAccountParam struct {
	Address              github_com_hyperledger_burrow_crypto.Address `protobuf:"bytes,1,opt,name=Address,proto3,customtype=github.com/hyperledger/burrow/crypto.Address" json:"Address"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *GetAccountParam) Reset()         { *m = GetAccountParam{} }
func (m *GetAccountParam) String() string { return proto.CompactTextString(m) }
func (*GetAccountParam) ProtoMessage()    {}
func (*GetAccountParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{1}
}
func (m *GetAccountParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountParam.Merge(dst, src)
}
func (m *GetAccountParam) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountParam proto.InternalMessageInfo

func (*GetAccountParam) XXX_MessageName() string {
	return "rpcquery.GetAccountParam"
}

type ListAccountsParam struct {
	Query                string   `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAccountsParam) Reset()         { *m = ListAccountsParam{} }
func (m *ListAccountsParam) String() string { return proto.CompactTextString(m) }
func (*ListAccountsParam) ProtoMessage()    {}
func (*ListAccountsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{2}
}
func (m *ListAccountsParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountsParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAccountsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsParam.Merge(dst, src)
}
func (m *ListAccountsParam) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsParam.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsParam proto.InternalMessageInfo

func (m *ListAccountsParam) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (*ListAccountsParam) XXX_MessageName() string {
	return "rpcquery.ListAccountsParam"
}

type GetNameParam struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNameParam) Reset()         { *m = GetNameParam{} }
func (m *GetNameParam) String() string { return proto.CompactTextString(m) }
func (*GetNameParam) ProtoMessage()    {}
func (*GetNameParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{3}
}
func (m *GetNameParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNameParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNameParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetNameParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNameParam.Merge(dst, src)
}
func (m *GetNameParam) XXX_Size() int {
	return m.Size()
}
func (m *GetNameParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNameParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetNameParam proto.InternalMessageInfo

func (m *GetNameParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (*GetNameParam) XXX_MessageName() string {
	return "rpcquery.GetNameParam"
}

type ListNamesParam struct {
	Query                string   `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNamesParam) Reset()         { *m = ListNamesParam{} }
func (m *ListNamesParam) String() string { return proto.CompactTextString(m) }
func (*ListNamesParam) ProtoMessage()    {}
func (*ListNamesParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{4}
}
func (m *ListNamesParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNamesParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNamesParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListNamesParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamesParam.Merge(dst, src)
}
func (m *ListNamesParam) XXX_Size() int {
	return m.Size()
}
func (m *ListNamesParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamesParam.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamesParam proto.InternalMessageInfo

func (m *ListNamesParam) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (*ListNamesParam) XXX_MessageName() string {
	return "rpcquery.ListNamesParam"
}

type GetValidatorSetParam struct {
	IncludeHistory       bool     `protobuf:"varint,1,opt,name=IncludeHistory,proto3" json:"IncludeHistory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidatorSetParam) Reset()         { *m = GetValidatorSetParam{} }
func (m *GetValidatorSetParam) String() string { return proto.CompactTextString(m) }
func (*GetValidatorSetParam) ProtoMessage()    {}
func (*GetValidatorSetParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{5}
}
func (m *GetValidatorSetParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValidatorSetParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValidatorSetParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetValidatorSetParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidatorSetParam.Merge(dst, src)
}
func (m *GetValidatorSetParam) XXX_Size() int {
	return m.Size()
}
func (m *GetValidatorSetParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidatorSetParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidatorSetParam proto.InternalMessageInfo

func (m *GetValidatorSetParam) GetIncludeHistory() bool {
	if m != nil {
		return m.IncludeHistory
	}
	return false
}

func (*GetValidatorSetParam) XXX_MessageName() string {
	return "rpcquery.GetValidatorSetParam"
}

type ValidatorSet struct {
	Height               uint64                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Set                  []*validator.Validator `protobuf:"bytes,2,rep,name=Set" json:"Set,omitempty"`
	History              []*ValidatorSetDeltas  `protobuf:"bytes,3,rep,name=History" json:"History,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ValidatorSet) Reset()         { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()    {}
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{6}
}
func (m *ValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSet.Merge(dst, src)
}
func (m *ValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSet proto.InternalMessageInfo

func (m *ValidatorSet) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ValidatorSet) GetSet() []*validator.Validator {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *ValidatorSet) GetHistory() []*ValidatorSetDeltas {
	if m != nil {
		return m.History
	}
	return nil
}

func (*ValidatorSet) XXX_MessageName() string {
	return "rpcquery.ValidatorSet"
}

type ValidatorSetDeltas struct {
	Validators           []*validator.Validator `protobuf:"bytes,2,rep,name=Validators" json:"Validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ValidatorSetDeltas) Reset()         { *m = ValidatorSetDeltas{} }
func (m *ValidatorSetDeltas) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetDeltas) ProtoMessage()    {}
func (*ValidatorSetDeltas) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{7}
}
func (m *ValidatorSetDeltas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetDeltas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetDeltas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidatorSetDeltas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetDeltas.Merge(dst, src)
}
func (m *ValidatorSetDeltas) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetDeltas) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetDeltas.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetDeltas proto.InternalMessageInfo

func (m *ValidatorSetDeltas) GetValidators() []*validator.Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (*ValidatorSetDeltas) XXX_MessageName() string {
	return "rpcquery.ValidatorSetDeltas"
}

type GetProposalParam struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProposalParam) Reset()         { *m = GetProposalParam{} }
func (m *GetProposalParam) String() string { return proto.CompactTextString(m) }
func (*GetProposalParam) ProtoMessage()    {}
func (*GetProposalParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{8}
}
func (m *GetProposalParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProposalParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProposalParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetProposalParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProposalParam.Merge(dst, src)
}
func (m *GetProposalParam) XXX_Size() int {
	return m.Size()
}
func (m *GetProposalParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProposalParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetProposalParam proto.InternalMessageInfo

func (m *GetProposalParam) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (*GetProposalParam) XXX_MessageName() string {
	return "rpcquery.GetProposalParam"
}

type ListProposalsParam struct {
	Proposed             bool     `protobuf:"varint,1,opt,name=Proposed,proto3" json:"Proposed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProposalsParam) Reset()         { *m = ListProposalsParam{} }
func (m *ListProposalsParam) String() string { return proto.CompactTextString(m) }
func (*ListProposalsParam) ProtoMessage()    {}
func (*ListProposalsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{9}
}
func (m *ListProposalsParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProposalsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProposalsParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListProposalsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProposalsParam.Merge(dst, src)
}
func (m *ListProposalsParam) XXX_Size() int {
	return m.Size()
}
func (m *ListProposalsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProposalsParam.DiscardUnknown(m)
}

var xxx_messageInfo_ListProposalsParam proto.InternalMessageInfo

func (m *ListProposalsParam) GetProposed() bool {
	if m != nil {
		return m.Proposed
	}
	return false
}

func (*ListProposalsParam) XXX_MessageName() string {
	return "rpcquery.ListProposalsParam"
}

type ProposalResult struct {
	Hash                 []byte          `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ballot               *payload.Ballot `protobuf:"bytes,2,opt,name=Ballot" json:"Ballot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProposalResult) Reset()         { *m = ProposalResult{} }
func (m *ProposalResult) String() string { return proto.CompactTextString(m) }
func (*ProposalResult) ProtoMessage()    {}
func (*ProposalResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{10}
}
func (m *ProposalResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProposalResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalResult.Merge(dst, src)
}
func (m *ProposalResult) XXX_Size() int {
	return m.Size()
}
func (m *ProposalResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalResult.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalResult proto.InternalMessageInfo

func (m *ProposalResult) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ProposalResult) GetBallot() *payload.Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (*ProposalResult) XXX_MessageName() string {
	return "rpcquery.ProposalResult"
}

type GetStatsParam struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatsParam) Reset()         { *m = GetStatsParam{} }
func (m *GetStatsParam) String() string { return proto.CompactTextString(m) }
func (*GetStatsParam) ProtoMessage()    {}
func (*GetStatsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{11}
}
func (m *GetStatsParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatsParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStatsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatsParam.Merge(dst, src)
}
func (m *GetStatsParam) XXX_Size() int {
	return m.Size()
}
func (m *GetStatsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatsParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatsParam proto.InternalMessageInfo

func (*GetStatsParam) XXX_MessageName() string {
	return "rpcquery.GetStatsParam"
}

type Stats struct {
	AccountsWithCode     uint64   `protobuf:"varint,1,opt,name=AccountsWithCode,proto3" json:"AccountsWithCode,omitempty"`
	AccountsWithoutCode  uint64   `protobuf:"varint,2,opt,name=AccountsWithoutCode,proto3" json:"AccountsWithoutCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcquery_85dc1071a8cbe440, []int{12}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(dst, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetAccountsWithCode() uint64 {
	if m != nil {
		return m.AccountsWithCode
	}
	return 0
}

func (m *Stats) GetAccountsWithoutCode() uint64 {
	if m != nil {
		return m.AccountsWithoutCode
	}
	return 0
}

func (*Stats) XXX_MessageName() string {
	return "rpcquery.Stats"
}
func init() {
	proto.RegisterType((*StatusParam)(nil), "rpcquery.StatusParam")
	golang_proto.RegisterType((*StatusParam)(nil), "rpcquery.StatusParam")
	proto.RegisterType((*GetAccountParam)(nil), "rpcquery.GetAccountParam")
	golang_proto.RegisterType((*GetAccountParam)(nil), "rpcquery.GetAccountParam")
	proto.RegisterType((*ListAccountsParam)(nil), "rpcquery.ListAccountsParam")
	golang_proto.RegisterType((*ListAccountsParam)(nil), "rpcquery.ListAccountsParam")
	proto.RegisterType((*GetNameParam)(nil), "rpcquery.GetNameParam")
	golang_proto.RegisterType((*GetNameParam)(nil), "rpcquery.GetNameParam")
	proto.RegisterType((*ListNamesParam)(nil), "rpcquery.ListNamesParam")
	golang_proto.RegisterType((*ListNamesParam)(nil), "rpcquery.ListNamesParam")
	proto.RegisterType((*GetValidatorSetParam)(nil), "rpcquery.GetValidatorSetParam")
	golang_proto.RegisterType((*GetValidatorSetParam)(nil), "rpcquery.GetValidatorSetParam")
	proto.RegisterType((*ValidatorSet)(nil), "rpcquery.ValidatorSet")
	golang_proto.RegisterType((*ValidatorSet)(nil), "rpcquery.ValidatorSet")
	proto.RegisterType((*ValidatorSetDeltas)(nil), "rpcquery.ValidatorSetDeltas")
	golang_proto.RegisterType((*ValidatorSetDeltas)(nil), "rpcquery.ValidatorSetDeltas")
	proto.RegisterType((*GetProposalParam)(nil), "rpcquery.GetProposalParam")
	golang_proto.RegisterType((*GetProposalParam)(nil), "rpcquery.GetProposalParam")
	proto.RegisterType((*ListProposalsParam)(nil), "rpcquery.ListProposalsParam")
	golang_proto.RegisterType((*ListProposalsParam)(nil), "rpcquery.ListProposalsParam")
	proto.RegisterType((*ProposalResult)(nil), "rpcquery.ProposalResult")
	golang_proto.RegisterType((*ProposalResult)(nil), "rpcquery.ProposalResult")
	proto.RegisterType((*GetStatsParam)(nil), "rpcquery.GetStatsParam")
	golang_proto.RegisterType((*GetStatsParam)(nil), "rpcquery.GetStatsParam")
	proto.RegisterType((*Stats)(nil), "rpcquery.Stats")
	golang_proto.RegisterType((*Stats)(nil), "rpcquery.Stats")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Status(ctx context.Context, in *StatusParam, opts ...grpc.CallOption) (*rpc.ResultStatus, error)
	GetAccount(ctx context.Context, in *GetAccountParam, opts ...grpc.CallOption) (*acm.Account, error)
	ListAccounts(ctx context.Context, in *ListAccountsParam, opts ...grpc.CallOption) (Query_ListAccountsClient, error)
	GetName(ctx context.Context, in *GetNameParam, opts ...grpc.CallOption) (*names.Entry, error)
	ListNames(ctx context.Context, in *ListNamesParam, opts ...grpc.CallOption) (Query_ListNamesClient, error)
	GetValidatorSet(ctx context.Context, in *GetValidatorSetParam, opts ...grpc.CallOption) (*ValidatorSet, error)
	GetProposal(ctx context.Context, in *GetProposalParam, opts ...grpc.CallOption) (*payload.Ballot, error)
	ListProposals(ctx context.Context, in *ListProposalsParam, opts ...grpc.CallOption) (Query_ListProposalsClient, error)
	GetStats(ctx context.Context, in *GetStatsParam, opts ...grpc.CallOption) (*Stats, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Status(ctx context.Context, in *StatusParam, opts ...grpc.CallOption) (*rpc.ResultStatus, error) {
	out := new(rpc.ResultStatus)
	err := c.cc.Invoke(ctx, "/rpcquery.Query/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccount(ctx context.Context, in *GetAccountParam, opts ...grpc.CallOption) (*acm.Account, error) {
	out := new(acm.Account)
	err := c.cc.Invoke(ctx, "/rpcquery.Query/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAccounts(ctx context.Context, in *ListAccountsParam, opts ...grpc.CallOption) (Query_ListAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/rpcquery.Query/ListAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryListAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ListAccountsClient interface {
	Recv() (*acm.Account, error)
	grpc.ClientStream
}

type queryListAccountsClient struct {
	grpc.ClientStream
}

func (x *queryListAccountsClient) Recv() (*acm.Account, error) {
	m := new(acm.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetName(ctx context.Context, in *GetNameParam, opts ...grpc.CallOption) (*names.Entry, error) {
	out := new(names.Entry)
	err := c.cc.Invoke(ctx, "/rpcquery.Query/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListNames(ctx context.Context, in *ListNamesParam, opts ...grpc.CallOption) (Query_ListNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[1], "/rpcquery.Query/ListNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryListNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ListNamesClient interface {
	Recv() (*names.Entry, error)
	grpc.ClientStream
}

type queryListNamesClient struct {
	grpc.ClientStream
}

func (x *queryListNamesClient) Recv() (*names.Entry, error) {
	m := new(names.Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetValidatorSet(ctx context.Context, in *GetValidatorSetParam, opts ...grpc.CallOption) (*ValidatorSet, error) {
	out := new(ValidatorSet)
	err := c.cc.Invoke(ctx, "/rpcquery.Query/GetValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProposal(ctx context.Context, in *GetProposalParam, opts ...grpc.CallOption) (*payload.Ballot, error) {
	out := new(payload.Ballot)
	err := c.cc.Invoke(ctx, "/rpcquery.Query/GetProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProposals(ctx context.Context, in *ListProposalsParam, opts ...grpc.CallOption) (Query_ListProposalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[2], "/rpcquery.Query/ListProposals", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryListProposalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ListProposalsClient interface {
	Recv() (*ProposalResult, error)
	grpc.ClientStream
}

type queryListProposalsClient struct {
	grpc.ClientStream
}

func (x *queryListProposalsClient) Recv() (*ProposalResult, error) {
	m := new(ProposalResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetStats(ctx context.Context, in *GetStatsParam, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/rpcquery.Query/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Status(context.Context, *StatusParam) (*rpc.ResultStatus, error)
	GetAccount(context.Context, *GetAccountParam) (*acm.Account, error)
	ListAccounts(*ListAccountsParam, Query_ListAccountsServer) error
	GetName(context.Context, *GetNameParam) (*names.Entry, error)
	ListNames(*ListNamesParam, Query_ListNamesServer) error
	GetValidatorSet(context.Context, *GetValidatorSetParam) (*ValidatorSet, error)
	GetProposal(context.Context, *GetProposalParam) (*payload.Ballot, error)
	ListProposals(*ListProposalsParam, Query_ListProposalsServer) error
	GetStats(context.Context, *GetStatsParam) (*Stats, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcquery.Query/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Status(ctx, req.(*StatusParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcquery.Query/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccount(ctx, req.(*GetAccountParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountsParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ListAccounts(m, &queryListAccountsServer{stream})
}

type Query_ListAccountsServer interface {
	Send(*acm.Account) error
	grpc.ServerStream
}

type queryListAccountsServer struct {
	grpc.ServerStream
}

func (x *queryListAccountsServer) Send(m *acm.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcquery.Query/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetName(ctx, req.(*GetNameParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNamesParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ListNames(m, &queryListNamesServer{stream})
}

type Query_ListNamesServer interface {
	Send(*names.Entry) error
	grpc.ServerStream
}

type queryListNamesServer struct {
	grpc.ServerStream
}

func (x *queryListNamesServer) Send(m *names.Entry) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorSetParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcquery.Query/GetValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorSet(ctx, req.(*GetValidatorSetParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcquery.Query/GetProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProposal(ctx, req.(*GetProposalParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProposals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProposalsParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ListProposals(m, &queryListProposalsServer{stream})
}

type Query_ListProposalsServer interface {
	Send(*ProposalResult) error
	grpc.ServerStream
}

type queryListProposalsServer struct {
	grpc.ServerStream
}

func (x *queryListProposalsServer) Send(m *ProposalResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcquery.Query/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStats(ctx, req.(*GetStatsParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcquery.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Query_Status_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Query_GetAccount_Handler,
		},
		{
			MethodName: "GetName",
			Handler:    _Query_GetName_Handler,
		},
		{
			MethodName: "GetValidatorSet",
			Handler:    _Query_GetValidatorSet_Handler,
		},
		{
			MethodName: "GetProposal",
			Handler:    _Query_GetProposal_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Query_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccounts",
			Handler:       _Query_ListAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNames",
			Handler:       _Query_ListNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProposals",
			Handler:       _Query_ListProposals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcquery.proto",
}

func (m *StatusParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockTimeWithin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.BlockTimeWithin)))
		i += copy(dAtA[i:], m.BlockTimeWithin)
	}
	if len(m.BlockSeenTimeWithin) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.BlockSeenTimeWithin)))
		i += copy(dAtA[i:], m.BlockSeenTimeWithin)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAccountParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcquery(dAtA, i, uint64(m.Address.Size()))
	n1, err := m.Address.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAccountsParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountsParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetNameParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNameParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListNamesParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNamesParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetValidatorSetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValidatorSetParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IncludeHistory {
		dAtA[i] = 0x8
		i++
		if m.IncludeHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(m.Height))
	}
	if len(m.Set) > 0 {
		for _, msg := range m.Set {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpcquery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.History) > 0 {
		for _, msg := range m.History {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRpcquery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorSetDeltas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetDeltas) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, msg := range m.Validators {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpcquery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProposalParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProposalParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListProposalsParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProposalsParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Proposed {
		dAtA[i] = 0x8
		i++
		if m.Proposed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProposalResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Ballot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(m.Ballot.Size()))
		n2, err := m.Ballot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStatsParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatsParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountsWithCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(m.AccountsWithCode))
	}
	if m.AccountsWithoutCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpcquery(dAtA, i, uint64(m.AccountsWithoutCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRpcquery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatusParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockTimeWithin)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	l = len(m.BlockSeenTimeWithin)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovRpcquery(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAccountsParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNameParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListNamesParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidatorSetParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeHistory {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovRpcquery(uint64(m.Height))
	}
	if len(m.Set) > 0 {
		for _, e := range m.Set {
			l = e.Size()
			n += 1 + l + sovRpcquery(uint64(l))
		}
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovRpcquery(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorSetDeltas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovRpcquery(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProposalParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListProposalsParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposalResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovRpcquery(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStatsParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountsWithCode != 0 {
		n += 1 + sovRpcquery(uint64(m.AccountsWithCode))
	}
	if m.AccountsWithoutCode != 0 {
		n += 1 + sovRpcquery(uint64(m.AccountsWithoutCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpcquery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpcquery(x uint64) (n int) {
	return sovRpcquery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeWithin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockTimeWithin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSeenTimeWithin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockSeenTimeWithin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountsParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountsParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountsParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNameParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNameParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNameParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNamesParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNamesParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNamesParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValidatorSetParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValidatorSetParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValidatorSetParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeHistory = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Set = append(m.Set, &validator.Validator{})
			if err := m.Set[len(m.Set)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &ValidatorSetDeltas{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSetDeltas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetDeltas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetDeltas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &validator.Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProposalParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProposalParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProposalParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProposalsParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProposalsParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProposalsParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proposed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcquery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &payload.Ballot{}
			}
			if err := m.Ballot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatsParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatsParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatsParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsWithCode", wireType)
			}
			m.AccountsWithCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountsWithCode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsWithoutCode", wireType)
			}
			m.AccountsWithoutCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountsWithoutCode |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpcquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpcquery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpcquery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcquery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpcquery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpcquery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpcquery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpcquery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpcquery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpcquery.proto", fileDescriptor_rpcquery_85dc1071a8cbe440) }
func init() { golang_proto.RegisterFile("rpcquery.proto", fileDescriptor_rpcquery_85dc1071a8cbe440) }

var fileDescriptor_rpcquery_85dc1071a8cbe440 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0xb9, 0x7f, 0xd2, 0x74, 0x92, 0x26, 0xed, 0xfe, 0x4a, 0x29, 0xa6, 0x4a, 0x2b, 0x1f,
	0x42, 0xa9, 0xc0, 0x89, 0x42, 0xcb, 0x01, 0x24, 0x44, 0x03, 0x28, 0x2d, 0x82, 0xaa, 0x38, 0x08,
	0x24, 0x6e, 0x1b, 0x7b, 0x49, 0x2c, 0x9c, 0xac, 0x59, 0xaf, 0x41, 0x79, 0x01, 0x5e, 0x83, 0x57,
	0xe1, 0xd8, 0x23, 0x67, 0x0e, 0x15, 0x6a, 0x5f, 0x04, 0x79, 0xbd, 0x1b, 0x7b, 0x93, 0xa8, 0xb7,
	0x99, 0xd9, 0x6f, 0x66, 0x76, 0x66, 0xbf, 0x6f, 0xa1, 0xc2, 0x42, 0xf7, 0x6b, 0x4c, 0xd8, 0xd8,
	0x0e, 0x19, 0xe5, 0x14, 0x15, 0x95, 0x6f, 0x3e, 0xec, 0xfb, 0x7c, 0x10, 0xf7, 0x6c, 0x97, 0x0e,
	0x1b, 0x7d, 0xda, 0xa7, 0x0d, 0x01, 0xe8, 0xc5, 0x9f, 0x85, 0x27, 0x1c, 0x61, 0xa5, 0x89, 0x66,
	0x69, 0x84, 0x87, 0x24, 0x92, 0xce, 0x2a, 0x76, 0x87, 0xd2, 0xac, 0x7e, 0xc3, 0x81, 0xef, 0x61,
	0x4e, 0x99, 0x3a, 0x63, 0xa1, 0x2b, 0xcd, 0xb5, 0x10, 0x8f, 0x03, 0x8a, 0xbd, 0xd4, 0xb5, 0x7c,
	0x28, 0x75, 0x39, 0xe6, 0x71, 0x74, 0x8e, 0x19, 0x1e, 0xa2, 0x7d, 0xa8, 0xb6, 0x03, 0xea, 0x7e,
	0x79, 0xef, 0x0f, 0xc9, 0x47, 0x9f, 0x0f, 0xfc, 0xd1, 0xb6, 0xb1, 0x67, 0xec, 0xaf, 0x3a, 0xd3,
	0x61, 0xd4, 0x84, 0xff, 0x45, 0xa8, 0x4b, 0xc8, 0x28, 0x87, 0x5e, 0x10, 0xe8, 0x79, 0x47, 0x16,
	0x86, 0x6a, 0x87, 0xf0, 0x63, 0xd7, 0xa5, 0xf1, 0x88, 0xa7, 0xed, 0xce, 0x60, 0xe5, 0xd8, 0xf3,
	0x18, 0x89, 0x22, 0xd1, 0xa6, 0xdc, 0x3e, 0xbc, 0xb8, 0xdc, 0xfd, 0xef, 0xcf, 0xe5, 0xee, 0x83,
	0xdc, 0x22, 0x06, 0xe3, 0x90, 0xb0, 0x80, 0x78, 0x7d, 0xc2, 0x1a, 0xbd, 0x98, 0x31, 0xfa, 0xbd,
	0xe1, 0xb2, 0x71, 0xc8, 0xa9, 0x2d, 0x73, 0x1d, 0x55, 0xc4, 0xba, 0x0f, 0x1b, 0x6f, 0xfc, 0x48,
	0xf5, 0x90, 0x33, 0x6d, 0xc2, 0xf2, 0xbb, 0x64, 0xbb, 0x72, 0x92, 0xd4, 0xb1, 0x2c, 0x28, 0x77,
	0x08, 0x3f, 0xc3, 0x43, 0x92, 0xa2, 0x10, 0x2c, 0x25, 0x8e, 0x04, 0x09, 0xdb, 0xaa, 0x43, 0x25,
	0x29, 0x97, 0xd8, 0x37, 0xd6, 0x7a, 0x06, 0x9b, 0x1d, 0xc2, 0x3f, 0xa8, 0xa5, 0x77, 0x89, 0x1c,
	0xaf, 0x0e, 0x95, 0xd3, 0x91, 0x1b, 0xc4, 0x1e, 0x39, 0xf1, 0x23, 0x4e, 0x65, 0x5a, 0xd1, 0x99,
	0x8a, 0x5a, 0x3f, 0x0c, 0x28, 0xe7, 0xb3, 0xd1, 0x16, 0x14, 0x06, 0xc4, 0xef, 0x0f, 0xb8, 0x48,
	0x58, 0x72, 0xa4, 0x87, 0xea, 0xb0, 0xd8, 0x25, 0x7c, 0x7b, 0x61, 0x6f, 0x71, 0xbf, 0xd4, 0xda,
	0xb4, 0xb3, 0x67, 0x9e, 0x64, 0x3b, 0x09, 0x00, 0x3d, 0x86, 0x15, 0xd5, 0x71, 0x51, 0x60, 0x77,
	0xec, 0x09, 0xe7, 0xf2, 0x8d, 0x5e, 0x92, 0x80, 0xe3, 0xc8, 0x51, 0x60, 0xeb, 0x35, 0xa0, 0xd9,
	0x63, 0x74, 0x08, 0x30, 0x89, 0x46, 0x37, 0x36, 0xcf, 0xe1, 0xac, 0x3a, 0xac, 0x77, 0x08, 0x3f,
	0x67, 0x34, 0xa4, 0x11, 0x0e, 0x26, 0x4b, 0x3e, 0xc1, 0xd1, 0x20, 0x7d, 0x6c, 0x47, 0xd8, 0x56,
	0x13, 0x50, 0xb2, 0x64, 0x05, 0x94, 0x8b, 0x36, 0xa1, 0x98, 0x46, 0x88, 0x27, 0x97, 0x36, 0xf1,
	0xad, 0xb7, 0x50, 0x51, 0x68, 0x87, 0x44, 0x71, 0xc0, 0xe7, 0xd5, 0x45, 0xf7, 0xa0, 0xd0, 0xc6,
	0x41, 0x40, 0xb9, 0xe0, 0x64, 0xa9, 0x55, 0xb5, 0x15, 0xf3, 0xd3, 0xb0, 0x23, 0x8f, 0xad, 0x2a,
	0xac, 0x75, 0x08, 0x4f, 0x54, 0x90, 0xf6, 0xb6, 0x08, 0x2c, 0x0b, 0x0f, 0x1d, 0xc0, 0xba, 0xa2,
	0x52, 0xc2, 0xe1, 0x17, 0xd4, 0x23, 0xf2, 0x41, 0x66, 0xe2, 0x89, 0x1e, 0xf2, 0x31, 0x1a, 0x73,
	0x01, 0x5f, 0x10, 0xf0, 0x79, 0x47, 0xad, 0x9f, 0x4b, 0x92, 0x4c, 0xa8, 0x05, 0x85, 0x54, 0x84,
	0xe8, 0x56, 0xf6, 0x4e, 0x39, 0x59, 0x9a, 0x1b, 0x49, 0xd8, 0x4e, 0x87, 0x95, 0xc8, 0x23, 0x80,
	0x4c, 0x4d, 0xe8, 0x4e, 0x96, 0x37, 0xa5, 0x31, 0xb3, 0x6c, 0x27, 0x1f, 0x83, 0x02, 0x3e, 0x85,
	0x72, 0x5e, 0x21, 0xe8, 0x6e, 0x96, 0x38, 0xa3, 0x1c, 0x3d, 0xb5, 0x69, 0xa0, 0x06, 0xac, 0x48,
	0xcd, 0xa0, 0x2d, 0xad, 0xe1, 0x44, 0x46, 0x66, 0xd9, 0x4e, 0xff, 0xa4, 0x57, 0x23, 0xce, 0xc6,
	0xe8, 0x08, 0x56, 0x27, 0x02, 0x42, 0xdb, 0x7a, 0xab, 0x4c, 0x55, 0x7a, 0x52, 0xd3, 0x40, 0xa7,
	0xe2, 0xa7, 0xd0, 0x14, 0x51, 0xd3, 0xfa, 0xcd, 0x48, 0xcd, 0xdc, 0x9a, 0x4f, 0x70, 0xf4, 0x04,
	0x4a, 0x39, 0x16, 0x22, 0x53, 0x2b, 0xa3, 0x91, 0xd3, 0x9c, 0x26, 0x08, 0x3a, 0x85, 0x35, 0x8d,
	0x99, 0x68, 0x47, 0x9f, 0x40, 0xa7, 0xac, 0x99, 0x9b, 0x4f, 0xa7, 0x67, 0xd3, 0x40, 0x87, 0x50,
	0x54, 0x1c, 0x43, 0xb7, 0xb5, 0x3b, 0x64, 0xbc, 0x33, 0xab, 0xfa, 0xe3, 0x47, 0xed, 0xe7, 0x17,
	0x57, 0x35, 0xe3, 0xf7, 0x55, 0xcd, 0xf8, 0x7b, 0x55, 0x33, 0x7e, 0x5d, 0xd7, 0x8c, 0x8b, 0xeb,
	0x9a, 0xf1, 0xe9, 0xe0, 0xe6, 0xbf, 0x91, 0x85, 0x6e, 0x43, 0xd5, 0xe9, 0x15, 0xc4, 0x2f, 0xff,
	0xe8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0xbf, 0x2b, 0xbb, 0x73, 0x06, 0x00, 0x00,
}
