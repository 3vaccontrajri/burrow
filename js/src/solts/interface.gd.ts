//Generated by solts - run yarn generate:provider to regenerate if solts Provider code is changed
import { Address, CallTx, ContractCodec, Event, EventStream, Signal } from '../index';
export type Caller = typeof defaultCall;
export interface Provider {
  deploy(msg: CallTx): Promise<Address>;
  call(msg: CallTx): Promise<Uint8Array | undefined>;
  callSim(msg: CallTx): Promise<Uint8Array | undefined>;
  listen(
    signatures: string[],
    address: string,
    callback: (err?: Error, event?: Event) => Signal | void,
    start?: 'first' | 'latest' | 'stream' | number,
    end?: 'first' | 'latest' | 'stream' | number,
  ): EventStream;
  payload(data: string | Uint8Array, address?: string): CallTx;
  contractCodec(contractABI: string): ContractCodec;
}
export async function defaultCall<Output>(
  client: Provider,
  addr: string,
  data: Uint8Array,
  isSim: boolean,
  callback: (returnData: Uint8Array | undefined) => Output,
): Promise<Output> {
  const payload = client.payload(data, addr);
  const returnData = await (isSim ? client.callSim(payload) : client.call(payload));
  return callback(returnData);
}
